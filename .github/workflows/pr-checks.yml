name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ master ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
      continue-on-error: true
    
    - name: Check TypeScript
      run: npm run typecheck

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm run test -- --run
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/coverage-final.json
        flags: unittests
        fail_ci_if_error: true

  build:
    name: Build Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Check build size
      run: |
        MAX_SIZE_MB=10
        ACTUAL_SIZE_MB=$(du -sm dist | cut -f1)
        echo "Build size: ${ACTUAL_SIZE_MB}MB (Max: ${MAX_SIZE_MB}MB)"
        if [ $ACTUAL_SIZE_MB -gt $MAX_SIZE_MB ]; then
          echo "Build size exceeds maximum allowed size!"
          exit 1
        fi

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Check for known vulnerabilities
      run: |
        npm audit --json > audit.json || true
        if grep -q '"severity":"high"' audit.json || grep -q '"severity":"critical"' audit.json; then
          echo "High or critical vulnerabilities found!"
          npm audit
          exit 1
        fi

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check for console.logs
      run: |
        if grep -r "console\.log" --include="*.ts" --include="*.tsx" src/ | grep -v "// eslint-disable" | grep -v "// @ts-ignore"; then
          echo "Found console.log statements in code!"
          exit 1
        fi
      continue-on-error: true
    
    - name: Check for TODO comments
      run: |
        echo "TODO comments found:"
        grep -r "TODO\|FIXME\|HACK" --include="*.ts" --include="*.tsx" src/ || true

  pr-labeler:
    name: PR Labeler
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - uses: actions/labeler@v5
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        configuration-path: .github/labeler.yml